{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"uni",
				"unity_sk_client"
			],
			[
				"N",
				"N_READS"
			],
			[
				"RE",
				"READ_MOTIVE_SK"
			],
			[
				"PO",
				"PORT_UNITY_WRITE_SK\tstatement"
			],
			[
				"IP",
				"IP_UNITY\tstatement"
			],
			[
				"sk",
				"skel_msg"
			],
			[
				"UNITY_",
				"UNITY_INFO"
			],
			[
				"mot",
				"motive_data_full\tstatement"
			],
			[
				"N_",
				"N_RB_IN_SKEL\tstatement"
			],
			[
				"_ol",
				"_old_turn\tint"
			],
			[
				"E",
				"ToEulerAngles()\tVector3"
			],
			[
				"RO",
				"RoundToInt(float f)\tint"
			],
			[
				"desYo",
				"desiredYOld\tfloat"
			],
			[
				"tot",
				"totalForceAligned\tVector3"
			],
			[
				"Mat",
				"Mathf\tMathf"
			],
			[
				"st",
				"standardY\tfloat"
			],
			[
				"W",
				"WRITE_TO_UNITY"
			],
			[
				"UNI",
				"UNITY_IP"
			],
			[
				"fa",
				"factorY\tfloat"
			],
			[
				"de",
				"desiredRoll\tfloat"
			],
			[
				"pl",
				"PlayCon\tPlayerController"
			],
			[
				"Pla",
				"PlayerController\tPlayerController"
			],
			[
				"_rot",
				"_rotTorqueCoeff\tfloat"
			],
			[
				"Vec",
				"Vector3\tVector3"
			],
			[
				"_",
				"_rotDragCoeff\tfloat"
			],
			[
				"thr",
				"thrust\tfloat"
			],
			[
				"desr",
				"desiredRollVel\tfloat"
			],
			[
				"Ma",
				"Mathf\tMathf"
			],
			[
				"mea",
				"measRoll\tfloat"
			],
			[
				"torque",
				"torqueRoll\tfloat"
			],
			[
				"des",
				"desiredZ\tfloat"
			],
			[
				"for",
				"forceXZ\tVector3"
			],
			[
				"vec",
				"Vector3\tVector3"
			],
			[
				"ve",
				"Vector3()\tVector3()"
			],
			[
				"addre",
				"AddRelativeTorque(Vector3 torque)\tvoid"
			],
			[
				"Ve",
				"Vector3\tVector3"
			],
			[
				"l",
				"Log(object message)\tvoid"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "import datetime \nfrom datetime import datetime\nfrom enum import Enum\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport os\nimport pandas as pd\nimport PSpincalc as sp\nimport socket as soc\nfrom socket import timeout\nimport struct\nimport subprocess\nimport sys\nfrom time import sleep\n\n\n# code to speed test\n\n\nclass Socket_struct:\n    pass\n\nclass Socket_info:\n    pass\n\nclass Bone_struct:\n    pass\n\nclass Settings:\n    pass\n\nclass UDP_Settings:\n    pass\n\nUDP_sett = UDP_Settings()\n\nsett = Settings()\n\n\n##################      MODE      ##################\n\n\nclass Mode_enum(Enum):\n    custom = 0\n    avatar = 1\n    acquisition = 2\n    control = 3\n    \n##################      CONSTANTS      ##################\n        \n# size of the BONE structure\nBONE_S_SIZE = 8\n\n# number of bones in skeleton\nN_RB_IN_SKEL = 21\n\nAXIS = {0 : 'roll', 1 : 'pitch'}\nPHASE_ROLL = {0 : 'straight', 1 : 'up', 2 : 'down'}\nPHASE_PITCH = {0 : 'straight', 1 : 'right', 2 : 'left'}\n\nPHASE = {'roll' : PHASE_ROLL, 'pitch' : PHASE_ROLL}\n\n##################      FUNCTIONS      ##################\n\n\ndef setup(IP, PORT, ID, timeout = 0.1):\n    # Datagram (udp) socket\n    try:\n        socket = soc.socket(soc.AF_INET, soc.SOCK_DGRAM)\n        # print('socket created')\n    except socket.error as msg:\n        print('Failed to create socket. Error : ', msg)\n        sys.exit()\n    # Bind socket to local IP and port\n    try:\n        socket.bind((IP, PORT))\n    except soc.error as msg:\n        print('Bind failed. Error Code : ', msg)\n        sys.exit()\n    # print('socket ', ID, ' bind complete')\n\n    # set timeout\n    socket.settimeout(timeout)\n\n    read_s = Socket_struct() # Create an empty socket structure\n\n    read_s.socket = socket\n    read_s.ID = ID\n\n    return read_s\n\n\ndef read(Read_struct):\n    # print('\\nREADING FROM', Read_struct.type, '\\n')\n    # receive data from client (data, addr)\n\n    if Read_struct.ID == 'MOTIVE_RB':\n\n        if DUMMY_READ:\n            data = b'\\x01\\x00\\x04\\x00\\xd0hG?\\xe7sp?.\\xbf\\x93\\xc0\\\\f\\xbf=$\\xd9j?]\\xa9\\x94=~\\x92\\xc2>'\n        else:\n            try:\n                data, addr = Read_struct.socket.recvfrom(4096)\n            except timeout:\n                return None\n\n        if not data:\n            return None\n\n        # print(\"Byte Length of Message :\", len(data), \"\\n\")\n        strs = \"\"\n\n        # THIS IS A int_32\n\n        for i in range(0, 1):\n            strs += \"i\"\n\n        # THIS IS A float\n\n        for i in range(1, len(data) // 4):\n            strs += \"f\"\n\n        # print(strs)\n\n        # print(\"Message Data (skeletal bone):\", struct.unpack(strs, data), \"\\n\")\n\n        data_ump = struct.unpack(strs, data)\n\n        bone_s = Bone_struct()\n    #         print(int(bin(data[0])[-8:], 2))\n        bone_s.ID = int(bin(data_ump[0])[-8:], 2)\n        bone_s.position = data_ump[1:4]\n        quaternion_t = data_ump[4:]\n        order = [3, 0, 1, 2]\n\n        bone_s.quaternion = [quaternion_t[i] for i in order]\n\n        # print(bone_s.quaternion)\n        bone_s.euler = sp.Q2EA(np.array(bone_s.quaternion), EulerOrder=\"zyx\", ignoreAllChk=True)[0]\n\n    elif Read_struct.ID == 'MOTIVE_SK':\n\n        if sett.DUMMY_READ:\n            data = b'\\x01\\x00\\x04\\x00\\xd0hG?\\xe7sp?.\\xbf\\x93\\xc0\\\\f\\xbf=$\\xd9j?]\\xa9\\x94=~\\x92\\xc2>'\n        else:\n            try:\n                data, addr = Read_struct.socket.recvfrom(4096)\n            except timeout:\n                return None\n\n        if not data:\n            return None\n\n        # print(\"Byte Length of Message :\", len(data), \"\\n\")\n        strs = \"\"\n\n        # one int and 7 floats, '21' times\n\n        for i in range(0, len(data) // 4):\n            if i % 8 == 0:\n                strs += \"i\"\n            else:\n                strs += \"f\"\n\n        # print(\"Message Data (skeletal bone):\", struct.unpack(strs, data), \"\\n\")\n\n        data_ump = struct.unpack(strs, data)\n\n        Q_ORDER = [3, 0, 1, 2]\n\n        for i in range(0, len(data_ump) // BONE_S_SIZE):\n            bone = list(data_ump[i*BONE_S_SIZE : (1+i)*BONE_S_SIZE])\n\n            # print bone\n\n\n            if i == 0:\n                ID = [(int(bin(bone[0])[-8:], 2))]\n                position = np.array(bone[1:4])\n                quaternion_t = np.array(bone[4:])\n                quaternion = np.array([quaternion_t[j] for j in Q_ORDER])\n                euler = sp.Q2EA(np.array(quaternion), EulerOrder=\"zyx\", ignoreAllChk=True)[0]\n            else:\n                ID = ID + [(int(bin(bone[0])[-8:], 2))]\n                position = np.vstack((position, bone[1:4]))\n                quaternion_t = bone[4:]\n                quaternion = np.vstack((quaternion, [quaternion_t[j] for j in Q_ORDER]))\n                euler = np.vstack((euler, (sp.Q2EA(np.array(quaternion), EulerOrder=\"zyx\", ignoreAllChk=True)[0])))\n            \n        ID = np.array(ID)\n        \n        data = np.c_[ID, position, quaternion, euler]\n        \n        # sort by ID\n        data = data[data[:, 0].argsort()]\n\n        return data\n\n    elif Read_struct.ID == 'UNITY_CALIB':\n\n        try:\n            data, addr = Read_struct.socket.recvfrom(4096)\n        except timeout:\n            return None\n\n        if not data:\n            return None\n\n#         print(\"Byte Length of Message :\", len(data), \"\\n\")\n        strs = \"\"\n        for i in range(0, len(data)//4):\n            strs += \"f\"\n\n        # print(strs)\n        # print(len(data))\n\n        unity_control = struct.unpack(strs, data)\n        # print(\"Message Data :\", unity_control, \"\\n\")\n        return unity_control\n\n    elif Read_struct.ID == 'UNITY_INFO':\n\n        try:\n            data, addr = Read_struct.socket.recvfrom(4096)\n        except timeout:\n            return None\n\n        if not data:\n            return None\n\n#         print(\"Byte Length of Message :\", len(data), \"\\n\")\n        strs = \"\"\n        for i in range(0, len(data)//4):\n            strs += \"i\"\n\n        # print(strs)\n        # print(len(data))\n\n        unity_info = struct.unpack(strs, data)\n        # print(\"Message Data :\", unity_control, \"\\n\")\n        return unity_info\n\n    elif Read_struct.ID == 'UNITY_QUERY':\n\n        try:\n            data, addr = Read_struct.socket.recvfrom(4096)\n        except timeout:\n            return 't'\n\n        if not data:\n            return None\n\n        # we receive a char\n\n        unity_query = data.decode(\"utf-8\") \n#         print(\"Message Data :\", unity_query, \"\\n\")\n        return unity_query\n\n\ndef write(Write_struct, towhom, msg):\n    Write_struct.socket.sendto(msg, (towhom.IP, towhom.PORT))\n    # print('Sent', msg, towhom.IP, 'port', towhom.PORT)\n    return\n\n\ndef read_sk_motive(UDP_sett):\n\n    Read_motive_sk = setup(UDP_sett.IP_MOTIVE, UDP_sett.PORT_MOTIVE, 'MOTIVE_SK')\n\n    skel = read(Read_motive_sk)\n\n    # # extract euler angles\n    # skel_eul = np.reshape(skel[:,-3:], 21*3)\n    # # make it horizontal\n    # skel_eul = skel_eul[:, None].T\n\n    # print(skel_eul)\n\n    # if skel_all.size == 0:\n    #     skel_all = skel\n    #     # skel_eul_all = skel_eul\n    # else:\n    #     skel_all = np.r_[skel_all, skel]\n        # skel_eul_all = np.r_[skel_eul_all, skel_eul_old]\n\n    # skel_eul_old = skel_eul\n\n    Read_motive_sk.socket.close()\n\n    return (skel)\n\n\ndef read_rb_motive(UDP_sett):\n\n    data = read(Read_motive)\n\n    # ID = np.array(data.ID)\n    # pos = np.array(data.position)\n    # quat = np.array(data.quaternion)\n    # euler = np.array(data.euler)\n\n    # bone = np.append(ID, pos)\n    # bone = np.append(bone, quat)\n    # bone = np.append(bone, euler)\n\n    # if i>1:\n    #     bone_all = np.vstack((bone, bone_old))\n    # else:\n    #     bone_all = bone\n\n    # bone_old = bone\n\n    # # print (bone)\n    # # print (bone_all)\n\n    # motive_data = np.vstack((motive_data, bone))\n\n    # motive_data_full_temp = [s + '_' for s in motive_indices]\n    # motive_data_full_temp = [s + str(ID) for s in motive_data_full_temp]\n\n    # motive_data_full = np.append(motive_data_full, motive_data_full_temp)\n\n    # print(motive_data_full)\n\n    return bone\n\n\ndef read_sensors_unity(UDP_sett):\n\n    Read_unity_control = setup(UDP_sett.IP_UNITY, UDP_sett.PORT_UNITY_READ_CALIB, 'UNITY_CALIB')\n    unity_calib = read(Read_unity_control)\n    Read_unity_control.socket.close()\n\n    Read_unity_info = setup(UDP_sett.IP_UNITY, UDP_sett.PORT_UNITY_READ_CALIB_INFO, 'UNITY_INFO')\n    unity_calib_info = read(Read_unity_info)\n    Read_unity_info.socket.close()\n\n    return (np.array(unity_calib), np.array(unity_calib_info))\n\n\ndef write_sk_to_unity(Write_unity_sk, client, skel):\n\n    skel_msg = np.reshape(skel[: , :-3], 21 * 8)\n    arr = skel_msg.tolist()\n\n    arr = arr + [float(count)]\n\n    strs = \"\"\n    # one int and 7 floats, '21' times\n\n    for i in range(0, len(arr) // 4):\n        if i % 8 == 0:\n            strs += \"i\"\n        else:\n            strs += \"f\"\n\n    print(arr)\n    # print(len(arr))\n    message = struct.pack('%sf' % len(arr), *arr)\n\n    # print(message)\n    write(Write_unity_sk, client, message)\n\n    if 0:\n        plt.axis()\n        plt.scatter(count, arr[8*2+1], c = 1)\n        plt.pause(0.0001)\n\n##################      SETTINGS      ##################\n\n\nmode = Mode_enum(2)\n\nfilename = datetime.now().strftime(\"%Y_%b_%d_%I_%M_%S%p\")\nfoldername = 'acquired_data'\n\n\nsett.N_READS = 100\n\nsett.READ_MOTIVE_RB = 0\nsett.READ_MOTIVE_SK = 0\nsett.READ_XSENS = 0\nsett.READ_FROM_UNITY = 0\nsett.READ_QUERY_FROM_UNITY = 0\n\nsett.WRITE_SK_TO_UNITY = 0\n\nsett.OPEN_CLOSE_CONTINUOUS = 0\n\nsett.DUMMY_READ = False\n\n# MOTIVE\n\nUDP_sett.IP_MOTIVE = \"127.0.0.1\"   # Local MOTIVE client\nUDP_sett.PORT_MOTIVE = 9000    # Arbitrary non-privileged port\n\n#UNITY\n\nUDP_sett.IP_UNITY = \"127.0.0.1\"\n\nUDP_sett.PORT_UNITY_QUERY = 30011\n\nUDP_sett.PORT_UNITY_READ_CALIB = 30012\nUDP_sett.PORT_UNITY_READ_CALIB_INFO = 30013\n\n\nUDP_sett.PORT_UNITY_WRITE_SK = 30000\n\nUDP_sett.PORT_UNITY_WRITE_SK_CLIENT = 26000\n\n\nif mode.name=='avatar':\n\n    sett.N_READS = 1000\n\n    sett.READ_MOTIVE_SK = 1\n\n    sett.READ_QUERY_FROM_UNITY = 1\n\n    sett.WRITE_SK_TO_UNITY = 1\n\n    sett.OPEN_CLOSE_CONTINUOUS = 1\n\n    sett.DUMMY_READ = False\n\n\nif mode.name=='acquisition':\n\n    sett.N_READS = 100\n\n    sett.READ_MOTIVE_SK = 1\n\n    sett.READ_QUERY_FROM_UNITY = 1\n\n    sett.WRITE_SK_TO_UNITY = 1\n\n    sett.OPEN_CLOSE_CONTINUOUS = 1\n\n    sett.DUMMY_READ = False\n\n    \n##################      IMPLEMENTATION      ##################\n\n\nstart = datetime.now()\n\n\nif sett.WRITE_SK_TO_UNITY:\n    unity_sk_client = Socket_info()\n\n    unity_sk_client.IP = UDP_sett.IP_UNITY\n    unity_sk_client.PORT = UDP_sett.PORT_UNITY_WRITE_SK_CLIENT\n\ncount = 0\n\nquery = ''\n\n# define data structure and headers\n\n        \nmotive_indices = np.array([])\n\nmotive_indices_base = np.char.array([ 'ID', 'pos_x', 'pos_y', 'pos_z', 'quat_x', 'quat_y', 'quat_z', 'quat_w', 'yaw', 'pitch', 'roll' ])\n\nfor i in range(N_RB_IN_SKEL):\n\n    n = np.char.array([('_' + str(i))])\n\n    if i==0:\n        motive_indices = motive_indices_base + n\n    else:\n        motive_indices = np.r_[motive_indices, motive_indices_base + n]\n\n\nunity_indices_calib = np.char.array([ 'Joy 1', 'Joy 2', 'Joy 3', 'Joy 4', 'roll', 'pitch', 'yaw', 'roll_rate', 'pitch_rate', 'yaw_rate', 'vel_x', 'vel_y', 'vel_z', 'vel_semiloc_x', 'vel_semiloc_y', 'vel_semiloc_z', 'corr_roll', 'corr_pitch', 'pos_x', 'pos_y', 'pos_z', 'rot_x', 'rot_y', 'rot_z', 'rot_w', 'timestamp' ])\nunity_indices_info = np.char.array([ 'calib_axis', 'calib_phase', 'instance' ])\n\nmotive_data = np.array(motive_indices)\nunity_data_calib = np.array(unity_indices_calib)\nunity_data_info = np.array(unity_indices_info)\ncalib_data = np.r_[motive_indices, unity_indices_calib, unity_indices_info]\n\ndata = calib_data\ndata = data.reshape(1, data.size)\n\ndata_num = np.array([])\n\n# create unity read query / write skeleton socket\nRead_unity_query = setup(UDP_sett.IP_UNITY, UDP_sett.PORT_UNITY_QUERY, 'UNITY_QUERY', timeout = 0.01)\nWrite_unity_sk = Read_unity_query\n    \nwhile count<sett.N_READS:\n    if mode.name=='avatar':\n\n        while count<sett.N_READS:\n            # create motive read socket\n            # update skeleton\n            # close motive read socket\n            (skel, skel_all) = read_sk_motive(UDP_sett, skel_all)\n\n            query = ''\n\n            # check if unity query\n            unity_query = read(Read_unity_query)\n\n            # close unity read socket\n            # Write_unity_sk.socket.close()\n\n            # if query : send skeleton\n            if unity_query=='r':\n\n                print('sending skeleton to UNITY')\n\n                # send skeleton\n                write_sk_to_unity(Write_unity_sk, unity_sk_client, skel)\n\n            elif unity_query=='q':\n\n                # close unity write socket\n                Read_unity_query.socket.close()\n\n                break\n\n    elif mode.name=='acquisition':\n        \n        # create motive read socket\n        # update skeleton\n        # close motive read socket\n        (skel) = read_sk_motive(UDP_sett)\n\n        query = ''\n\n        # check if unity query\n        unity_query = read(Read_unity_query)\n        \n#         print(unity_query)\n\n        # if query : read unity and skeleton, then save to csv\n        if unity_query=='a':\n\n#             print('saving data to csv')\n\n            # read unity controls and sensors\n            (unity_calib, unity_calib_info) = read_sensors_unity(UDP_sett)\n            \n            # update skeleton\n            (skel) = read_sk_motive(UDP_sett)\n            \n            # reshape all to 1D array\n            skel = skel.reshape(1, skel.size)\n            unity_calib = unity_calib.reshape(1, unity_calib.size)\n            unity_calib_info = unity_calib_info.reshape(1, unity_calib_info.size)\n\n#             print(skel)\n#             print(unity_calib)\n#             print(unity_calib_info)\n            \n            data_row = np.c_[skel, unity_calib, unity_calib_info]\n            \n            data_num = np.vstack([data_num, data_row]) if data_num.size else data_row\n\n        elif unity_query=='q':\n\n            # close unity write socket\n            Read_unity_query.socket.close()\n\n            break\n[dir: C:\\Users\\matteoPC\\Documents\\GitHub\\Python_acquisition]\n\n    if mode.name=='control':\n        \n        while True:\n            # create motive read socket\n            # update skeleton\n            # close motive read socket\n            (skel, skel_all) = read_sk_motive(sett, UDP_sett, skel_all)\n\n            query = ''\n\n            # check if unity query\n            unity_query = read(Read_unity_query)\n\n            # close unity read socket\n            # Write_unity_sk.socket.close()\n\n            # if query : send skeleton\n            if unity_query=='r':\n\n                print('sending skeleton to UNITY')\n\n                # process skeleton (TOBEDONE)\n\n                # send commands to unity (TOBEDONE)\n\n            elif unity_query=='q':\n\n                # close unity write socket\n                Write_unity_sk.socket.close()\n\n                break\n            \n    count = count + 1\n\nRead_unity_query.socket.close()\n\ndata = np.vstack([data, data_num]) if data_num.size else data\n\n# if READ_XSENS:\n#     subprocess.Popen([\"C:\\Users\\matteoPC\\Documents\\GitHub\\Python_acquisition\\StreamFromXSENS/release/StreamFromXSENS.exe\"])\n\n\n#     start_iter = datetime.now()\n\n#     end_iter = datetime.now()\n\n#     print('iter time = ', end_iter - start_iter)\n\n\nif not os.path.isdir(foldername):\n    os.mkdir(foldername)\n    \nhome_fol = os.getcwd()\nos.chdir(foldername)\n\nfilename = filename + '_' + AXIS[data_num[-1, -3]] + '_' + PHASE[AXIS[data_num[-1, -3]]][data_num[-1, -2]]\n\nnp.savetxt((filename + '.txt'), (data), delimiter=\",\", fmt=\"%s\")\n# np.savetxt('test_skelall_eul.txt', (skel_eul_all), delimiter=\",\", fmt=\"%s\")\n# np.savetxt('test_boneall.txt', (motive_data), delimiter=\",\", fmt=\"%s\")\n# np.savetxt('test.txt', (motive_data), delimiter=\",\", fmt=\"%s\")\n# np.savetxt('test_1.txt', (motive_data_full), delimiter=\",\", fmt=\"%s\")\n\nos.chdir(home_fol)\n\nend = datetime.now()\nprint('total time = ', end - start)\n\ndata",
			"file": "Acq_test_Optitrack.py",
			"file_size": 16461,
			"file_write_time": 131695572091015659,
			"settings":
			{
				"buffer_size": 15886,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/C/ProgramData/Anaconda3/lib/site-packages/numpy/core/shape_base.py",
			"settings":
			{
				"buffer_size": 18548,
				"line_ending": "Unix"
			}
		},
		{
			"file": "TimeoutInput.py",
			"settings":
			{
				"buffer_size": 2850,
				"encoding": "UTF-8",
				"line_ending": "Windows",
				"name": "import sys"
			}
		},
		{
			"file": "PSpincalc.py",
			"settings":
			{
				"buffer_size": 32579,
				"encoding": "UTF-8",
				"line_ending": "Windows"
			}
		},
		{
			"contents": "Package Control Messages\n========================\n\nAnaconda\n--------\n\n  \n  \n                                                            |\n                _` |  __ \\    _` |   __|   _ \\   __ \\    _` |   _` |\n               (   |  |   |  (   |  (     (   |  |   |  (   |  (   |\n              \\__,_| _|  _| \\__,_| \\___| \\___/  _|  _| \\__,_| \\__,_|\n  \n                                       The Sublime Text 3 Python IDE\n  \n  \n  Welcome to anaconda, the Sublime Text 3 Python IDE. We hope you enjoy it :)\n  \n  Anaconda works fine out of the box but you can configure it to totally adapt\n  it to your needs or style.\n  \n  For a complete guide of use and configuration take a look at:\n  \n  \thttp://damnwidget.github.io/anaconda/\n  \n  Please, consider donating to maintain this project alive:\n  \n  \thttps://pledgie.com/campaigns/32230\n\n\nSublimeLinter\n-------------\n\n  SublimeLinter 4.3\n  =================\n  \n  - Now shows the active/assigned linters in the status bar.\n    SL will show e.g. 'eslint(ok)' if there were no errors, or 'eslint(1|2)' when\n    there is 1 warning and 2 errors.\n    If there is a hard error with the configuration it will state 'eslint(erred)'.\n    The counters_template setting is still applied, but different than before.\n    Check the default settings for more information.\n  \n  - Introduces a new setting called 'kill_old_processes'. If set it to true,\n    SL will send a 'terminate' signal to processes when SL won't use its output.\n    Use this if you're using slow linters that seem to hang ST a lot.\n    Related PR: https://github.com/SublimeLinter/SublimeLinter/pull/1250\n  \n  - For OSX we now wait (up to 1 minute) until the env has been loaded by Sublime.\n    This should prevent issues with SL not finding the executables.\n    Note that dev builds of ST also fix this issue for us.\n    Related ST issue: https://github.com/SublimeTextIssues/Core/issues/1877\n  \n  - Fixed a bug where hovering would sometimes not open the right tooltip.\n  - Fixed the visualization of multi-line errors in tooltips.\n  - Fixed a bug where not all gutter icons were drawn.\n  \n  - The debounce delay before a lint in background mode will now be set\n    automatically based on how fast your computer and your linters actually are.\n  - Added an upper limit for how many lint processes can run in parallel.\n  - Much improved logging about what command SL actually runs.\n  \n  \n  For plugin developers\n  ----------------------\n  \n  BREAKING CHANGES:\n  - For STREAM_BOTH linters we will call 'linter.on_stderr()' automatically if\n    there is any output on 'stderr' and only pass 'stdout' down.\n    Set 'on_stderr = None' to disable.\n  - Removed 'util.popen()'\n  - Removed 'linter.build_options()'\n  \n  DEPRECATED:\n  - 'util.communicate' has been deprecated,\n    The functionality is now in 'self._communicate'.\n    If you need to quickly run a command, use 'util.check_output'\n  \n  NEW:\n  - New API: popen calls now return an object, not just a string of the output\n    with the typical members '.stdout/.stderr/returncode'.\n    For compatibility, only the new 'linter.parse_output(proc, virtual_view)'\n    actually sees this 'proc'.\n  - If the linter failed, call 'self.notify_failure()'.\n    You should additionally log the error either as an error or a warning.\n  - In the 'defaults' setting we now support flags like \"{'--stdin': True|False}\".\n    You can also define e.g. \"{'--include': ''}\" instead of \"{'--include:': ''}\".\n  - You can now get the linter settings via 'get_linter_settings(linter, view)'.\n",
			"settings":
			{
				"buffer_size": 3517,
				"line_ending": "Windows",
				"name": "Package Control Messages",
				"read_only": true,
				"scratch": true
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
		[
			[
				[
					"Packages/C++/C++ Single File.sublime-build",
					""
				],
				[
					"Packages/C++/C++ Single File.sublime-build",
					"Run"
				]
			],
			[
				"Packages/C++/C++ Single File.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		],
		[
			[
				[
					"Packages/Python/Python.sublime-build",
					""
				],
				[
					"Packages/Python/Python.sublime-build",
					"Syntax Check"
				],
				[
					"Packages/User/python3.sublime-build",
					""
				]
			],
			[
				"Packages/Python/Python.sublime-build",
				""
			]
		]
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 392.0,
		"last_filter": "pack",
		"selected_items":
		[
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"insta",
				"Package Control: Install Package"
			],
			[
				"pac",
				"Package Control: Install Package"
			]
		],
		"width": 428.0
	},
	"console":
	{
		"height": 360.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '6f4c264a24d933ce70df5dedcf1dcaee' + 'ebe013ee18cced0ef93d5f746d80ef60'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)",
			"https://www.facebook.com/events/1354247184630574/?acontext=%7B%22ref%22%3A%2229%22%2C%22ref_notif_type%22%3A%22event_joined_nearby%22%2C%22action_history%22%3A%22null%22%7D"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition"
	],
	"file_history":
	[
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/Acq_test.py",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/test_nb.ipynb",
		"/C/ProgramData/Anaconda3/lib/tty.py",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/test.txt",
		"/C/Users/matteoPC/Documents/GitHub/DeepLearningCoursePracticals/dlc_practical_3_solution.py",
		"/C/Users/matteoPC/Documents/GitHub/DeepLearningCoursePracticals/dlc_practical_1_solution.py",
		"/C/Users/matteoPC/Anaconda2/lib/site-packages/numpy/lib/function_base.py",
		"/C/Users/matteoPC/Anaconda2/lib/socket.py",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/test_skelall_eul.txt",
		"/C/Users/matteoPC/Anaconda2/lib/site-packages/numpy/core/shape_base.py",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/test_skelall.txt",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/test_boneall.txt",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/test_1.txt",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/python_symb.sublime-project",
		"/C/Users/matteoPC/Documents/GitHub/Python_acquisition/Acq_test_Optitrack.py",
		"/C/Users/matteoPC/Documents/GitHub/NatNetSDK/Samples/bin/x64/Client-output.pts",
		"/C/Users/matteoPC/Documents/GitHub/Wearable-Software/.git/config",
		"/C/boost_1_66_0/boost/asio.hpp",
		"/C/Users/matteoPC/Desktop/NatNetSDK/Samples/PythonClient/PythonSample.py",
		"/C/Users/matteoPC/Desktop/NatNetSDK/Samples/PythonClient/NatNetClient.py",
		"/C/Users/matteoPC/Desktop/NatNetSDK/Samples/bin/x64/Client-output.pts",
		"/C/Users/matteoPC/Desktop/NatNetSDK/Samples/SampleClient/Client-output.pts",
		"/C/Users/matteoPC/Desktop/NatNetSDK 3/Samples/PythonClient/NatNetClient.py",
		"/C/Users/matteoPC/Desktop/NatNetSDK 3/Samples/PythonClient/PythonSample.py",
		"/C/Users/matteoPC/AppData/Roaming/Sublime Text 3/Packages/User/python3.sublime-build",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/UDPCommunication.cs",
		"/C/Users/matteoPC/Documents/GitHub/NatNetSDK/Samples/SampleClient/SampleClient_1.cpp",
		"/C/Users/matteoPC/Documents/GitHub/NatNetSDK/Samples/SampleClient/SampleClient.cpp",
		"/C/Users/matteoPC/Documents/GitHub/NatNetSDK/Samples/SampleClient_1/SampleClient_1.cpp",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/Triangle.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/CameraController.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/GeneratePath.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/GenerateInfinite.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/PlayerController.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/PIDController.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/NumberHolder.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/GenerateTube.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/GenerateTerrain.cs",
		"/C/Users/matteoPC/Documents/GitHub/Wearable-Software/Main.py",
		"/C/Users/matteoPC/Documents/GitHub/Wearable-Software/Cursor.py",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/PIDController_Alternative.cs",
		"/C/Users/matteoPC/Documents/GitHub/Quad_UNITY/Assets/_Assets/Scripts/PlayerController_Alternative.cs",
		"/C/Users/matteoPC/Documents/Quad_UNITY/Assets/_Assets/Scripts/PIDController.cs",
		"/C/Users/matteoPC/AppData/Roaming/Sublime Text 3/Packages/Default/Default (Windows).sublime-keymap",
		"/C/Users/matteoPC/AppData/Roaming/Sublime Text 3/Packages/Python Flake8 Lint/Flake8Lint.sublime-settings",
		"/D/Matteo/Learning Unity/Quad_1_1/Assets/_Assets/Scripts/PlayerController.cs",
		"/D/GoogleDrive/Unity3D/flyexp_5_4_3/Assets/Scripts/CommandsManager.cs",
		"/C/Libraries/boost_1_66_0/libs/asio/example/cpp03/windows/transmit_file.cpp",
		"/D/GoogleDrive/Unity3D/flyexp_5_4_3/Assets/Scripts/Main_1.cs",
		"/D/GoogleDrive/Unity3D/flyexp_5_4_3/Assets/Scripts/SerialCommunication.cs",
		"/C/Libraries/boost_1_66_0/boostcpp.jam",
		"/C/Python27/Lib/distutils/distutils.cfg",
		"/C/Users/matteoPC/Desktop/Wrap test/Attempt_2/hello.cpp",
		"/C/MinGW/lib/gcc/mingw32/6.3.0/include/c++/math.h",
		"/C/MinGW/lib/gcc/mingw32/6.3.0/include/c++/cmath",
		"/C/Users/matteoPC/Documents/GitHub/MT SDK/Examples/xda_c_cpp/console.cpp",
		"/C/Users/matteoPC/Documents/GitHub/symbiotic/Symbody/libs/Xsens/include/xsens/xscontrol.h",
		"/C/Users/matteoPC/Anaconda2/envs/wrapping/Lib/distutils/distutils.cfg",
		"/C/Users/matteoPC/Desktop/Wrap test/Attempt_2/_swigdemo_module.cc",
		"/C/Users/matteoPC/Documents/GitHub/wrapping/example.h",
		"/C/Users/matteoPC/Documents/GitHub/wrapping/example.py",
		"/C/Users/matteoPC/Documents/GitHub/wrapping/example.i",
		"/C/Users/matteoPC/Documents/GitHub/wrapping/example.c",
		"/D/Matteo/Learning Unity/Quad_1_1/Assets/ScriptsNew Folder/PlayerController.cs",
		"/D/Matteo/Learning Unity/Quad_1_1/Assets/PIDController.cs",
		"/C/Users/matteoPC/Documents/GitHub/Python_Interface_Cpp/swig/fibonacci/setup.py",
		"/C/Users/matteoPC/Desktop/get-pip.py",
		"/C/Users/matteoPC/Evernote/Databases/Attachments/example.c",
		"/C/Users/matteoPC/Documents/GitHub/wrapping/setup_example.py",
		"/C/Users/matteoPC/Documents/GitHub/wrapping_sip/configure.py",
		"/C/Users/matteoPC/Documents/GitHub/wrapping_sip/example.sip",
		"/C/ProgramData/Anaconda3/Lib/pathlib.py",
		"/C/ProgramData/Anaconda3/libs/python36.lib",
		"/C/ProgramData/Anaconda3/include/Python.h",
		"/D/GoogleDrive/Unity3D/flyexp_5_4_3/Assets/Scripts/pathPlanning.cs",
		"/C/Users/matteoPC/Documents/GitHub/wrapping/_example_module.cc",
		"/D/GoogleDrive/Unity3D/flyexp_5_4_3/Assets/Scripts/TrajectoryManagement.cs",
		"/C/Users/matteoPC/AppData/Roaming/Sublime Text 3/Packages/Unity Shader/UnityShader.sublime-settings",
		"/D/Matteo/Learning Unity/Quad_1_1/Quad_1_1.sublime-project",
		"/D/Matteo/Learning Unity/Roll a Ball/Roll a Ball/Assets/Scripts/PlayerController.cs",
		"/C/Users/matte/Google Drive/CERN/TE-MSC-SCD/Work Folder/Software/CODE/Certificate analysis (HI-LUMI)/CERT_GUI (1).m"
	],
	"find":
	{
		"height": 26.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"READ_CONTROL",
			"READ_CONTROL_INFO",
			"t_o",
			"Read_unity_query",
			"print",
			"\n        ",
			"\n        if OPEN_CLOSE_CONTINUOUS:",
			"JOY",
			"array",
			"append",
			"euler",
			".)",
			"1e",
			"\n    print('\\nREADING FROM', Read_struct.type, '\\n')",
			"socket",
			"\\"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "Acq_test_Optitrack.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 15886,
						"regions":
						{
						},
						"selection":
						[
							[
								13776,
								13776
							]
						],
						"settings":
						{
							"SL.14.region_keys":
							[
							],
							"SL.16.region_keys":
							[
								"SL.flake8.Highlights.|region.redish markup.deleted.sublime_linter markup.error.sublime_linter|32",
								"sublime_linter.protected_regions",
								"SL.flake8.Gutter.region.redish markup.deleted.sublime_linter markup.error.sublime_linter.dot",
								"SL.flake8.Highlights.|region.yellowish markup.changed.sublime_linter markup.warning.sublime_linter|32",
								"SL.flake8.Gutter.region.yellowish markup.changed.sublime_linter markup.warning.sublime_linter.dot"
							],
							"SL.95.region_keys":
							[
							],
							"auto_complete_triggers":
							[
								{
									"characters": ".",
									"selector": "source.python - string - comment - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								},
								{
									"characters": ".",
									"selector": "source.python - string - constant.numeric"
								}
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 9574.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/C/ProgramData/Anaconda3/lib/site-packages/numpy/core/shape_base.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 18548,
						"regions":
						{
						},
						"selection":
						[
							[
								5974,
								5974
							]
						],
						"settings":
						{
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 3807.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "TimeoutInput.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2850,
						"regions":
						{
						},
						"selection":
						[
							[
								2850,
								2850
							]
						],
						"settings":
						{
							"SL.111.region_keys":
							[
							],
							"SL.15.region_keys":
							[
							],
							"auto_name": "import sys",
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "PSpincalc.py",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32579,
						"regions":
						{
						},
						"selection":
						[
							[
								1011,
								1607
							]
						],
						"settings":
						{
							"SL.16.region_keys":
							[
							],
							"SL.20.region_keys":
							[
								"SL.flake8.Highlights.|region.yellowish markup.changed.sublime_linter markup.warning.sublime_linter|32",
								"sublime_linter.protected_regions",
								"SL.flake8.Gutter.region.yellowish markup.changed.sublime_linter markup.warning.sublime_linter.dot"
							],
							"syntax": "Packages/Python/Python.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3517,
						"regions":
						{
						},
						"selection":
						[
							[
								535,
								535
							]
						],
						"settings":
						{
							"SL.17.region_keys":
							[
							],
							"auto_indent": false,
							"syntax": "Packages/Text/Plain text.tmLanguage",
							"tab_size": 2,
							"tab_width": 2,
							"translate_tabs_to_spaces": true,
							"word_wrap": true
						},
						"translation.x": 0.0,
						"translation.y": 54.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 26.0
	},
	"input":
	{
		"height": 39.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.SublimeLinter":
	{
		"height": 0.0
	},
	"output.SublimeLinter Messages":
	{
		"height": 132.0
	},
	"output.exec":
	{
		"height": 189.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.variable_get":
	{
		"height": 222.0
	},
	"pinned_build_system": "Anaconda Python Builder",
	"project": "python_symb.sublime-project",
	"replace":
	{
		"height": 48.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 122.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
